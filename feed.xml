<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://qianchenzhumeng.github.io/</id><title>前尘逐梦</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2022-10-27T23:58:09+08:00</updated> <author> <name>前尘逐梦</name> <uri>https://qianchenzhumeng.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://qianchenzhumeng.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="https://qianchenzhumeng.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2022 前尘逐梦 </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>为芒果派 MQ-R F133 编译 iot_gw 网关</title><link href="https://qianchenzhumeng.github.io/posts/build_iot_gw_for_mq-r-f133.md/" rel="alternate" type="text/html" title="为芒果派 MQ-R F133 编译 iot_gw 网关" /><published>2022-10-27T23:26:00+08:00</published> <updated>2022-10-27T23:26:00+08:00</updated> <id>https://qianchenzhumeng.github.io/posts/build_iot_gw_for_mq-r-f133.md/</id> <content src="https://qianchenzhumeng.github.io/posts/build_iot_gw_for_mq-r-f133.md/" /> <author> <name>前尘逐梦</name> </author> <category term="Embedded" /> <category term="OpenWrt" /> <summary> 前前后后花了大概半个月的时间，总算完成了两件事： 为 iot_gw 替换串口库，避免移植到新平台时适配串口的繁琐流程。 为芒果派 MQ-R F133 编译 iot_gw 网关。 RUST 和 RISC-V，都是比较新的东西，二者结合的时候，遇到的问题也比较多。这次编译主要卡在 openssl、paho-mqtt-sys 的编译上，概括来说，有以下几个方面： 老版本的 openssl，比如 openssl-1.0.2l，没有 riscv 的配置，使用 riscv64-unknown-linux-gnu 工具链编译时，最后编译出的库格式无法被链接器识别。 riscv64gc-unknown-linux-gnu 的 ssize_t 是 4 个字节，和指针 8 个字节大小不同，为 C 代码生成 Rust 绑定时需要传入 --no-size_t-is-usize 来... </summary> </entry> <entry><title>芒果派 MQ-R F133 开发指南</title><link href="https://qianchenzhumeng.github.io/posts/mq-r-f133_develop_guide/" rel="alternate" type="text/html" title="芒果派 MQ-R F133 开发指南" /><published>2022-10-17T00:04:00+08:00</published> <updated>2022-10-17T00:30:51+08:00</updated> <id>https://qianchenzhumeng.github.io/posts/mq-r-f133_develop_guide/</id> <content src="https://qianchenzhumeng.github.io/posts/mq-r-f133_develop_guide/" /> <author> <name>前尘逐梦</name> </author> <category term="Embedded" /> <category term="OpenWrt" /> <summary> 1. 开发环境搭建 搭建开发环境比较简单，芒果派 Tina-Linux 代码库的自述文件中有在 Ubuntu18.04 上搭建 F133 开发环境的的指导，唯一比较折磨人的问题是下载 SDK 的时间比较久。 如果是在 WSL 中搭建开发环境，需要注意以下两个问题： 注意不要将 Tina-Linux 随意放置在 C 盘、D 盘等位置上，实测这样做的时候，即使对应目录开启了大小写敏感，编译时也会发生莫名其妙的问题。需要放置在 WSL 用户的家目录下，编译才能正常进行。 确保 WSL 的版本是 2。编译打包的过程会调用一些工具，有一部分工具是 32 位的，WSL1 不支持运行 32 位程序，需要升级为 WSL2。 WSL1 升级到 WSL2： # 查看名称和版本号 wsl -l -v 比如： NAME STATE V... </summary> </entry> <entry><title>如何使用 Gitlab 进行嵌入式项目管理</title><link href="https://qianchenzhumeng.github.io/posts/how_to_management_embedded_projects_using_gitlab/" rel="alternate" type="text/html" title="如何使用 Gitlab 进行嵌入式项目管理" /><published>2022-04-10T15:04:00+08:00</published> <updated>2022-04-10T15:04:00+08:00</updated> <id>https://qianchenzhumeng.github.io/posts/how_to_management_embedded_projects_using_gitlab/</id> <content src="https://qianchenzhumeng.github.io/posts/how_to_management_embedded_projects_using_gitlab/" /> <author> <name>前尘逐梦</name> </author> <category term="Embedded" /> <category term="Other" /> <summary> 1. 背景 对于体量比较小的嵌入式项目来说，如果打算自建项目管理系统，那么 Gitlab 是个不错的选择，像源代码版本控制、制品管理、故障跟踪，甚至需求管理，都可以在 Gitlab 完成。 2. Gitlab 安装及启动 安装过程相对简单，以 Ubuntu 为例，安装社区版： curl -s https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh | sudo bash sudo apt-get install gitlab-ce 这就安装好了。当然，如果是在服务器上安装，那还要进行更多的配置，按照官网上的操作即可，此处不再赘述。 首次运行前，先进行配置： sudo gitlab-ctl reconfigure 默认的管理员账号及密码相关的信息会显示在屏幕上，例... </summary> </entry> <entry><title>Windows 下使用 Rust 和 GTK4 创建 GUI 程序</title><link href="https://qianchenzhumeng.github.io/posts/gui_development_with_rust_and_gtk4_on_windows/" rel="alternate" type="text/html" title="Windows 下使用 Rust 和 GTK4 创建 GUI 程序" /><published>2022-03-26T13:50:00+08:00</published> <updated>2022-03-27T12:17:30+08:00</updated> <id>https://qianchenzhumeng.github.io/posts/gui_development_with_rust_and_gtk4_on_windows/</id> <content src="https://qianchenzhumeng.github.io/posts/gui_development_with_rust_and_gtk4_on_windows/" /> <author> <name>前尘逐梦</name> </author> <category term="Rust" /> <summary> 1. 准备开发环境 (1) 安装 GUN 工具链 MinGW 是在 Windows 上用于 Windows 原生应用开发的 GNU 工具链，安装方式有两种，一种是使用 MinGW 安装管理器进行安装，另一种是通过 MSYS2 进行安装。相比于 MinGW 安装器，MSYS2 提供的功能更丰富，可以访问 MSYS2 的官方网站[1]获取具体的介绍信息。 MSYS2 的官网首页给出了 MSYS2 的安装方式，其中包含了 MSYS2 安装好之后，使用内部集成的 pacman 包管理器安装 mingw-w64 的步骤。 将 MinGW 的如下目录添加到环境变量中： C:\msys64\mingw64\bin C:\msys64\mingw64\include C:\msys64\mingw64\lib 之后将 rust 的工具链切换为 gnu 工具链： rust... </summary> </entry> <entry><title>Keil HEX 文件格式解析及数据提取</title><link href="https://qianchenzhumeng.github.io/posts/keil_hex_file_format/" rel="alternate" type="text/html" title="Keil HEX 文件格式解析及数据提取" /><published>2022-02-13T21:15:00+08:00</published> <updated>2022-02-13T21:15:00+08:00</updated> <id>https://qianchenzhumeng.github.io/posts/keil_hex_file_format/</id> <content src="https://qianchenzhumeng.github.io/posts/keil_hex_file_format/" /> <author> <name>前尘逐梦</name> </author> <category term="Embedded" /> <category term="MCU" /> <summary> 1. 背景 进行 MCU OTA 升级调试时，升级重启后，MCU 程序跑飞，怀疑程序下载缓冲区的内容被改写，为了排除这个疑点，需要将缓冲区内的数据与编译生成的 BIN 文件或 HEX 文件内的数据进行比对。思路是将数据以文本形式输出到文件中，使用文件比对工具进行比对。 Keil 的 SAVE 调试命令会将下载缓冲区中的数据输出到 Intel HEX 格式[1]的文件中，虽然编译生成的 *.hex 文件也是该格式，但是二者有时不能直接对比：前者的地址会从 0x0000 开始，但是编译生成的 *.hex 文件内记录的起始地址与实际指定的程序烧录地址有关，但是数据是一样的。因此，需要从这两个文件中分别提取数据进行比对。如果是 BIN 文件，仅包含二进制数据，可以将数据提取出来，以同样的文本形式输出到文件中进行比对。 2. 文件格式 (1) Intel HEX 文件格式 Keil ... </summary> </entry> </feed>
